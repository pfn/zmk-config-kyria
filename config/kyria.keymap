/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <../boards/shields/kyria/boards/nice_nano.overlay>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define SWAP 1
#define NUMPAD 2
#define SYMBOLS 3
#define NAV 4
//#define MOUSE 4
#define MEDIA 5
#define RGB 6
#define BLUETOOTH 7

&left_encoder {
	resolution = <2>;
};

&right_encoder {
	resolution = <2>;
};

&mt {
	flavor = "tap-preferred";
};

&lt {
	flavor = "tap-preferred";
};

/ {
	ext-power {
		compatible = "zmk,ext-power-generic";
		label = "EXT_POWER";
		control-gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
		init-delay-ms = <150>;
	};

	behaviors {
		mtp: mod_tap_permissive {
			compatible = "zmk,behavior-hold-tap";
			label = "MOD_TAP_PERMISSIVE";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
		};
		mto: mod_tap_other_hold {
			compatible = "zmk,behavior-hold-tap";
			label = "MOD_TAP_OTHER_HOLD";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
	&kp ESC       &kp Q &kp W &kp E &lt RGB R &lt MEDIA T                                         &lt BLUETOOTH Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
	&mto LCTRL TAB &kp A &kp S &kp D &lt NAV F &kp G                                               &kp H &kp J  &kp K     &kp L   &mt RALT SEMI &mtp RCTRL SQT
	&kp LSHFT &mt LGUI Z &mt LALT X &kp C &kp V &mt LSHFT B &none &caps_word   &kp C_PP &none     &mt RSHFT N &kp M  &kp COMMA &kp DOT &mt RGUI FSLH &kp RSHFT
	                     &kp C_MUTE &kp C_PREV &mo NUMPAD &kp RET &sl SWAP     &sl SWAP &kp SPACE &mo SYMBOLS &kp C_NEXT &mo RGB
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
		};

		swap_layer {
			bindings = <
	&kp BSPC       &kp P &kp O &kp I &kp U &lt BLUETOOTH Y                                         &mt MEDIA T &mt RGB R  &kp E     &kp W   &kp Q    &kp ESC
	&mtp RCTRL SQT &mt RALT SEMI &kp L &kp K &kp J &kp H                                            &kp G &lt NAV F  &kp D     &kp S   &kp A &mto LCTRL TAB
	&kp RSHFT &mt RGUI FSLH &kp DOT &kp COMMA &kp M &mt RSHFT N &none &kp C_PP   &caps_word  &none &mt LSHFT B &kp V  &kp C &mt LALT X &mt LGUI Z &kp LSHFT
	                     &mo RGB &kp C_NEXT &mo SYMBOLS &kp SPACE &trans         &trans &kp RET    &mo NUMPAD &kp C_PREV &kp C_MUTE
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		numpad_layer {

			bindings = <
	&trans     &kp PG_UP &kp HOME &kp UP   &kp END   &kp LBRC                                  &kp RBRC &kp N7  &kp N8 &kp N9 &kp KP_SLASH &trans
	&kp INSERT &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp LBKT                                  &kp RBKT &kp N4  &kp N5 &kp N6 &kp KP_MINUS &kp KP_MULTIPLY
	&trans     &trans &trans &kp LC(LEFT) &kp LC(RIGHT) &kp LPAR &trans &trans   &trans &trans &kp RPAR &kp N1  &kp N2 &kp N3 &kp KP_PLUS  &kp EQUAL
	                         &trans &trans &trans &trans &trans                  &trans  &trans &kp N0 &kp KP_DOT &trans
			>;
		};

		symbol_layer {

			bindings = <
	&kp GRAVE &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                                 &kp F6    &kp F7    &kp F8       &kp F9      &kp F10   &kp DEL
	&kp TILDE &kp EXCL &kp AT &kp HASH &kp DOLLAR &kp PRCNT                      &kp CARET &kp AMPS  &kp STAR     &kp MINUS   &kp EQUAL &kp BSLH
	&trans    &kp F11 &kp F12 &trans &trans &trans &trans &trans   &trans &trans &trans &trans  &trans &kp UNDER &kp PLUS &kp PIPE
	                          &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
			>;

		};

		nav_layer {

			bindings = <
	&trans &trans &trans &trans &trans &trans                                &kp LC(LEFT) &kp PG_DN   &kp PG_UP  &kp LC(RIGHT) &kp PSCRN  &kp HOME
	&trans &trans &trans &trans &trans &trans                                &kp LEFT     &kp DOWN    &kp UP     &kp RIGHT     &caps_word &kp INS
	&trans &trans &trans &trans &trans &trans &trans &trans    &trans &trans &kp K_REDO   &kp K_PASTE &kp K_COPY &kp CUT       &kp K_UNDO &kp END
	                     &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
			>;

		};

		media_layer {

			bindings = <
	&trans &trans &trans &trans &trans &trans                                &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                                &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans    &trans &trans &trans     &trans &trans &trans &trans &trans
	                     &trans &trans &trans &trans &trans    &trans &kp C_PP &kp C_MUTE &trans &trans
			>;

		};

		rgb_layer {
			bindings = <
	&trans &trans &trans &trans &ext_power EXT_POWER_TOGGLE_CMD &trans       &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                                &rgb_ug RGB_TOG &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI &rgb_ug RGB_EFF
	&trans &trans &trans &trans &trans &trans &trans &trans    &trans &trans &trans          &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD &rgb_ug RGB_EFR
	                     &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
			>;

		};

		bluetooth_layer {

			bindings = <
	&bt BT_NXT &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                    &trans &trans &trans &trans &trans &trans
	&bt BT_PRV &trans &trans &trans &trans &trans                                                  &trans &trans &trans &trans &trans &trans
	&trans     &trans &trans &out OUT_BLE &out OUT_USB &out OUT_TOG &trans &trans    &trans &trans &trans &trans &trans &trans &trans &trans
	                         &bt BT_CLR &trans &trans &trans &trans                  &trans &trans &trans &trans &trans
			>;

		};

	};
};
